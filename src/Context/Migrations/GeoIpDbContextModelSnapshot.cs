// <auto-generated />
using System;
using System.Net;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(GeoIpDbContext))]
    partial class GeoIpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Block", b =>
                {
                    b.Property<ValueTuple<IPAddress, int>>("Network")
                        .HasColumnType("cidr")
                        .HasColumnName("network");

                    b.Property<short?>("AccuracyRadius")
                        .HasColumnType("smallint")
                        .HasColumnName("accuracy_radius");

                    b.Property<int?>("GeonameId")
                        .HasColumnType("integer")
                        .HasColumnName("geoname_id");

                    b.Property<bool?>("IsAnonymousProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous_proxy");

                    b.Property<bool?>("IsSatelliteProvider")
                        .HasColumnType("boolean")
                        .HasColumnName("is_satellite_provider");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(6,4)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(7,4)")
                        .HasColumnName("longitude");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int?>("RegisteredCountryGeonameId")
                        .HasColumnType("integer")
                        .HasColumnName("registered_country_geoname_id");

                    b.Property<int?>("RepresentedCountryGeonameId")
                        .HasColumnType("integer")
                        .HasColumnName("represented_country_geoname_id");

                    b.HasKey("Network")
                        .HasName("blocks_pkey");

                    b.HasIndex("GeonameId")
                        .HasDatabaseName("ix_blocks_geoname_id");

                    b.ToTable("blocks", (string)null);
                });

            modelBuilder.Entity("Shared.Models.Location", b =>
                {
                    b.Property<int>("GeonameId")
                        .HasColumnType("integer")
                        .HasColumnName("geoname_id");

                    b.Property<string>("CityName")
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<string>("ContinentCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("continent_code");

                    b.Property<string>("ContinentName")
                        .HasColumnType("text")
                        .HasColumnName("continent_name");

                    b.Property<string>("CountryIsoCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("country_iso_code");

                    b.Property<string>("CountryName")
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<bool?>("IsInEuropeanUnion")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_european_union");

                    b.Property<string>("LocaleCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("locale_code");

                    b.Property<short?>("MetroCode")
                        .HasColumnType("smallint")
                        .HasColumnName("metro_code");

                    b.Property<string>("Subdivision1IsoCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("subdivision_1_iso_code");

                    b.Property<string>("Subdivision1Name")
                        .HasColumnType("text")
                        .HasColumnName("subdivision_1_name");

                    b.Property<string>("Subdivision2IsoCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("subdivision_2_iso_code");

                    b.Property<string>("Subdivision2Name")
                        .HasColumnType("text")
                        .HasColumnName("subdivision_2_name");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.HasKey("GeonameId")
                        .HasName("locations_pkey");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Shared.Models.Block", b =>
                {
                    b.HasOne("Shared.Models.Location", "Location")
                        .WithMany("Blocks")
                        .HasForeignKey("GeonameId")
                        .HasConstraintName("blocks_geoname_id_fkey");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Shared.Models.Location", b =>
                {
                    b.Navigation("Blocks");
                });
#pragma warning restore 612, 618
        }
    }
}